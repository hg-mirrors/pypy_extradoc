Pypy Documentation 
==================

We have a fair amount of documentation for the Pypy project. The files
are available from the website as html (view them along the left side of
the pypy-doc webpage). They are also available from the repository,
under the *doc/* directory or under the *doc/devel* sub-directory. Or,
to catch up on what we've been up to lately, just peek at the
recently-modified_ documents page.

Overview
--------

If you just want an overview of the project, take a look at these items in *doc/*.

 * architecture_:
	a more technical overview of the current architecture 

 * oscon2003-paper_:
	presentation to OSCON on what pypy is about and why you should care


Getting Started
---------------

If you want to get involved, take a look at the following documentation  to get a better taste:

These file are in the *doc/* directory:

 * howtopypy_:
	provides some hands-on instructions for getting started
	

 * readme_:
	this file is on using ReST for pypy documentation


 * wrapping_:
	a description of application-level and interpreter-level wrapped 		objects

This file is in the *doc/devel/* sub-directory:

 * howtosvn_:
	for new users of subversion

Before you code
---------------

Before doing pypy work, you should also take a look at these developer-specific instructions, found in the *doc/devel/* sub-directory of the repository:

 * coding-style_:
	covers pypy coding conventions

	

 * optionaltool_:
	there are some optional tools we use for pypy. 

 * testdesign_:
	pypy is a test-driven development project.read here to find out more 	about how we're doing testing.

Further reading
---------------

* An interesting thread on an HP tech report that may be proof the pypy is feasible_ . (We already knew that...)

* An interesting thread on why VHLL rock_ . (We already knew that too.)
	
* A thread on Python in Scheme_ .

* An intriguting project, FlashMob_ - creating an adhoc supercomputer.

* A discussion on Python and lisp_ support

* An interesting repository_ of papers by Xerox Parc members, with quite a few issues more or less relevant to PyPy.

* A thread on the gnu lightning_ project."GNU lightning is a library that generates assembly language code at run-time; it is very fast, making it ideal for Just-In-Time compilers, and it abstracts over the target CPU, as it exposes to the clients a standardized RISC instruction set inspired by the MIPS and SPARC chips."

* A project to create a Low Level Virtual Machine (LLVM_) and a PyPy-LLVM_ discussion, and conversation_ between PyPy and LLVM.

* A thread discussing the xhelix_ python C extension implementing Helix encryption and authentication, which may be interesting to use as a pypy performance test at some point.

* A paper for PyCon 2004: "IronPython_ is a new implementation of the Python language targeting the Common Language Runtime (CLR). It compiles python programs into bytecode (IL) that will run on either Microsoft's .NET or the Open Source Mono platform. IronPython includes an interactive interpreter and transparent on-the-fly compilation of source files just like standard Python. In addition, IronPython supports static compilation of Python code to produce static executables (.exe's) that can be run directly or static libraries (.dll's) that can be called from other CLR languages."

* A comparison of Python and Pliant_ , an OS written in a python-like language. 


.. _architecture: http://codespeak.net/pypy/index.cgi?doc/architecture.html
.. _oscon2003-paper: http://codespeak.net/pypy/index.cgi?doc/oscon2003-paper.html
.. _howtopypy: http://codespeak.net/pypy/index.cgi?doc/howtopypy.html
.. _readme: http://codespeak.net/pypy/index.cgi?doc/readme.html
.. _wrapping: http://codespeak.net/pypy/index.cgi?doc/wrapping.html
.. _coding-style: http://codespeak.net/pypy/index.cgi?doc/devel/coding-style.html
.. _howtosvn: http://codespeak.net/pypy/index.cgi?doc/devel/howtosvn.html
.. _optionaltool: http://codespeak.net/pypy/index.cgi?doc/devel/optionaltool.html
.. _testdesign: http://codespeak.net/pypy/index.cgi?doc/devel/testdesign.html
.. _feasible: http://codespeak.net/pipermail/pypy-dev/2004q2/001289.html
.. _rock: http://codespeak.net/pipermail/pypy-dev/2004q1/001255.html
.. _Scheme: http://codespeak.net/pipermail/pypy-dev/2004q1/001256.html
.. _FlashMob: http://www.flashmobcomputing.org/
.. _lisp: http://codespeak.net/pipermail/pypy-dev/2003q4/001048.html
.. _repository: http://www2.parc.com/csl/groups/sda/publications.shtml
.. _lightning: http://codespeak.net/pipermail/pypy-dev/2003q4/001051.html
.. _LLVM: http://llvm.cs.uiuc.edu/
.. _PyPy-LLVM: http://codespeak.net/pipermail/pypy-dev/2003q4/001115.html
.. _conversation: http://codespeak.net/pipermail/pypy-dev/2003q4/001119.html
.. _xhelix: http://codespeak.net/pipermail/pypy-dev/2003q4/001129.html
.. _IronPython: http://www.python.org/pycon/dc2004/papers/9/
.. _pliant: http://pliant.cx 
.. _recently-modified: http://codespeak.net/pypy/index.cgi?doc/recent
