
People present:
    - Samuele
    - Maciek
    - Carl Friedrich
    - Benjamin
    - Mikael

later:
    - Anto
    - Armin
    - Iko
    - Bea

discussions to be had:
    - what goals/benchmarks do we want for the prototype DONE
    - things we know are missing DONE
    - state of the tests DONE

    - what to do with ootype
    - how will Eurostars work, how will work be organized


Goals/Benchmarks
-----------------

Goal: be somehow faster than CPython in real programs

Benchmarks:
    - Richards
    - Pystone
    - mako, gadfly, templess
    - port some of the JS benchmarks?
    - look at unladden-swallow benchmarks
    - Sympy
    - Simpy?
    - Pyrolog
    
later:
    - translate.py

- there should be a unified way to run these benchmark
- benchmarks should be run nightly
- we might need a benchmarking server


State of Tests
---------------

- coverage holes in metainterp/optimizer
- coverage of x86 backend needs many random runs – check this!
- need more direct tests of the x86 backend
- some funniness in test_ll2ctypes.py
- run random tests for x86 nightly
- we need tests for pypy-jit behaviour that explicitely check whether the loops
  make sense
- the tragedy of the skipped tests

things we know are missing
---------------------------

metainterp/frontend:
- virtualizables are not finished
- there is no restriction on the length of the trace
- proper inlining logic
- loop nesting (across calls)
- we need to do something about constantness
- we need to do something about assert isinstance(x, Class)
- more backendopt before jitting, assert removal
- many ooisnull guards in a row
- remove the numerous checks for frame.vable_rti in the
  interpreter (non-JITting) part

- speed of tracing and fallbacks?

backend:
- recompilation after every bridge is bad
- jump backward in x86 backend is inefficient
- memory management for the code
- speed of backend?

Python interpreter:
- lookups of various kinds
- calls‽


TASKS
-----

look at tests

 - more or less full coverage for optimize*.py
 - add GC tests for x86 backend (Armin and Maciek around)
 - make test_ll_random.py a bit better than before SORT-OF-DONE
 - set up test_ll_random to run nightly with x86 backend
 - fix test_ll_random with llgraph backend DONE
 - fix x86 nightly failure DONE
 - fix the generator test on trunk DONE
 - look at the codewriter problems DONE

 - make x86 not recompile everything
    - think about code memory management
 - don't trace into action flag stuff DONE
 - bit of inlining before bytecode production DONE
 - inlining on the Python level
 - storage sinking (removing consecutive getfields/setfields)
 - build a pypy-c-jit from before the sprint for comparison IN-PROGRESS

 - green virtualizable fields (Armin, Iko)
 - remove the numerous checks for frame.vable_rti in the
   interpreter (non-JITting) part (Samuele, Carl Friedrich, Armin around)
 - test the loops that pypy-c-jit produces IN-PROGRESS (Benjamin, Mikke,
   Macie(k/j) around)

 - kill the minimal backend (Armin, Iko)
