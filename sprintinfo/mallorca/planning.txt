==================
Mallorca planning
==================


People present
=============================

Armin Rigo 
Michael Hudson
Samuele Pedroni
Eric van Riet Paap
Carl Friedrich Bolz
Anders Chrigstroem
Christian Tismer
Gerald Klix
Stephan Diehl
Richard Emslie
Beatrice Duering 

People supposedly present
=========================

Andrew Thompson
Jacob Hallen


Tasks
======

  - JIT:  Arre, Samuele
   Graph generating ops
   Designed interface (see draft-jit-ideas),
   Refactored llabstractinterp to use the operations
   Next discussion: arre, samuele, armin +...

  - stackless application level interface: Christian, 
    started from the demo coroutine impl, trying to expose
    at application level, both greenlet and stackless-like interfaces.
    (issues: testing needs translation, the primitives are not
     there on top of CPython, maybe use stackless or greenlet
     to provide them or make the bytecode itself on top of CPython
     stackless). Next step: fastest possible translation for testing.
     DONE: Exposed coroutines at application-level, support for flags on
     the coroutines to use for other concurrency primitives to
     construct on top of them.

  - express exception raising operations in the graphs as
    calls to helpers (backends could use their special 
    operations)
   Eric, Richard

  ( - l3interp/offsetof/sizeof work:
    Progress. Progress needs either hacks and assuming Boehm
    or GC integration. Try to progress assuming Boehm )

  - integration of the garbage collection toolkit with the
    DONE: offsetof, sizeof work done
    Started: insert GC neeeded behaviour as graph transformations.
    Carl, Michael

  - improving the way we interface with external functions.
    (also think about how exceptions fit in there):
    add static ctypes functionality into RPython itself
    DONE: glued atoi from ctypes (cheating a bit)
    DONE: basic annotation for ctypes structures and basics types.
    Working on annotating ctypes arrays
    Next would be rtyping...
    Gerald, Stephan

later:
======

  - our threading implementation is still incredibly
    slow, we need to work on that.

  - refactor argument handling and calls in the object space

  - look into how the LLVM JIT works

  - transformations to be more clever with checking for
    exceptions

  - socket module
    already improved but still far from complete


