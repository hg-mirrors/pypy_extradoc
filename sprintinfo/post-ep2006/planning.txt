Planning Europython Sprint
==========================

Samuele: General wizardry


* The extension module compiler.  Using it for implementing 
  extension modules both for PyPy and CPython from the same
  source code. (lawrence, arre)

* work and experiment with our to-be-relased 0.9 stackless features 

* work on high level backends: .NET (anto, etc) 

* fix ootype system bugs (anto, michele, arigo around)

* polishing the Javascript backend, docs, ... (maciek, aaron, eric around)

* optimization of core Python data types, making full 
  use of PyPy's flexible architecture and python-implemented 
  (and then translated) type system. 

  - having a string implementation for concatenation, slicing (cfbolz, pieter)

  - an implementation of long using C's long long

  - specialized dictionary implementations

* optimizations of aspects of the interpreter

* You may even dare to dive into ongoing work on the JIT compiler

* experimenting with novel security systems for Python,
  enabled by PyPy 

* packaging and configuration (alexandre, guido, david, samuele around)

* logic object space, stackless (aurelien, ludovi)
  - possible but annoying: find out why clone does not work

* make stackless code smaller by introducing helper functions

* try to attach weights to blocks that order blocks in the C code or even give
  hints to GCC stack the resume code is rarely executed

* profile based optimization should be integrated with translate.py and maybe
  even with GCC

* experiment with the LLVM JIT code generator (simon, eric)
