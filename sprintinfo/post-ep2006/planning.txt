Planning Europython Sprint
==========================

Samuele: General wizardry


* The extension module compiler.  Using it for implementing 
  extension modules both for PyPy and CPython from the same
  source code. (lawrence, arre, brian, sad)

  IN-PROGRESS: the time module, a cache implementation


* work and experiment with our relased 0.9 stackless features 

* work on high level backends: .NET: IN-PROGRESS
  - fix ootype system bugs (anto, michele, arigo around)

* polishing the Javascript backend, docs, ... 

* improving error messages: maciek, samuele: IN-PROGRESS

* optimization of core Python data types, making full 
  use of PyPy's flexible architecture and python-implemented 
  (and then translated) type system. 

  - having a string implementation for concatenation, slicing, 
    DONE

  - an implementation of long using C's long long: annoying

  - specialized dictionary implementations: SOME THINKING

* optimizations of aspects of the interpreter

* You may even dare to dive into ongoing work on the JIT compiler

* experimenting with novel security systems for Python,
  enabled by PyPy 

* packaging and configuration (alexandre, guido, david, hpk, cfbolz)
  SOME DISUSSIONS

* fixing translation on 64 bit platforms , SOME PROGRESS

* logic object space, stackless (aurelien, ludovic, anders)
  - possible but annoying: find out why clone does not work
    (one bug found), SLOW PROGRESS

* make stackless code smaller by introducing helper functions
  (mwh, fabrizio) SLOW PROGRESS

* try to attach weights to blocks that order blocks in the C code or even give
  hints to GCC stack the resume code is rarely executed

* profile based optimization should be integrated with translate.py and maybe
  even with GCC

* experiment with the LLVM JIT code generator
  SOME PROGRESS HERE

* preliminary doctest support: DONE (guido, hpk)
