=========================================================================
Agile Business and EU funding: sprint methodology in a funded OSS project
=========================================================================

Abstract
==========

This paper uses an evolutionary approach, a walkthrough
through the history of the PyPy project, touching down on
different aspects of agility.  Agility played a key role from
the beginning - the PyPy project started from some mails
between a few people, quickly had a first one-week "sprint"
from where it evolved into a structure that was able to carry
out a research project - and got accepted by the European
Union.  During the course, two companies got founded and are
now growing and employing key developers. 

Technical Development is strongly rooted in open-source
contexts and this adds another agility aspect - dynamic
communication, cooperation and exchange with other people and
projects.  

The process of getting EU-funding posed (and continues to pose) a
challenge to the community-rooted PyPy project: how to connect
agile open source culture with formal structures: exposition
to requirements like planning, budget estimation, work
distribution and resource tracking.  After our first year we
are reasonably happy with the balance we strike between
organisations and EU funding on the one and the developers 
driving the technical aspects of the project on the other side. 


Agility in Technical Development and Organisation 
=========================================================

Agile approaches: sprinting
----------------------------

The first drafts of ideas of what was to become PyPy started during a sprint,
held at Trillke-Gut in Hildesheim in February 2003. The sprint was inspired by 
practices used by other Python oriented projects such as Zope3.  Originally the 
sprint methodology used in the Python community grew from practices within Zope
Corporation. Their definition of a sprint was  "two-day or three-day focused
development session, in which developers pair off together in a room and focus
on building a particular subsystem". 

It turned out that sprinting got to be a key technique in evolving 
the code base and the community/people around it.  The early PyPy sprints moved 
around, being organised by core developers together with local Pythonistas 
in Louvain LaNeuve, Gothenburg, Vilnius and Amsterdam.  Sprints gave
the opportunity to both help, participate and influence the ideas within PyPy.

Sprints as such are not part of the traditional Agile
portfolio of techniques, the closest thing to it comes from
Scrum who names the 30 days long programming iterations
"sprints", covering a certain increment. In the Scrum method
considerable effort is put into performing the sprint planning
as well as creating and documenting the "sprint backlog" which
is then feedbacked into the "Product backlog". The sprint ends
with a "sprint review" - an informal planning session in which
the team decides on upcoming work. There are also techniques
in which the team looks at ways to improve the development
methodology and future sprints.

To our knowledge, most open-source projects are only sprinting up to a week
which also reflects the fact that many contributors give their time 
and even money to gather and work together and thus it's different 
from having fully funded people from one company working together. 

Why did PyPy choose sprinting as a key technique? It is a method that fits
distributed teams well because it gets the team focused around visible 
challenging goals while working collarobatively (pair-programming, status
meetings, discussions etc) as well as acceleratedly (short increments and
tasks, "doing" and testing instead of long startups of planning and
requirement gathering). This means that most of the time a sprint is a great
way of getting results, but also to get new people aquinted with the codebase.
It is also a great method for dissemination and learning within the team
because of the pair-programming.


Agile approaches: test-driven development
-----------------------------------------

Test-driven development is a cornerstone for programming together
in a distributed team effectively.  Seen from an Agile
Manifesto perspective it is right up there as one of the key
elements since it puts focus on producing working code, rather
than diagrams, plans and papers and then faulty software.

Seen from an Open Source community perspective it is a vitalising strategy -
especially when combined with an transparent open process in which anyone
interested can participate - if only for just a few days at a sprint. Some of
the key problems identified by Frederick P. Brooks in the latest version of
"The Mythical Man-Month" (unfortunately still very actual today) are estimating
correct amount of time for communication and testing/debugging.  Automated
testing development and version control help with many of those problems,
especially in the hands of a team sprinting its way through the Python
community - welcoming everyone to participate.

Apart from rewriting the language within itself, PyPy also evolved a number of 
development tools useful for writing tests and glueing things together. 

.. image:: plots/loc.png 
.. test driven development 

Agility: Open Communication and organisation
----------------------------------------------------

Another agility aspects relates to the transparent and open communication
about the project.  Only very few (EU-contract related) documents are 
access restricted, everything else is freely available and modifiable. 
Announcing Sprints, Releases and development goals lead to more and 
more people subscribing to mailing lists or participating in development. 

Moreover, the PyPy developers evolved a model of weekly 30-minute 
IRC chat meetings where topics are briefly discussed, delegated
or decided upon: those meetings are open to all active developers 
and usually do not discuss internal EU matters much except that 
funded developers probably keep EU goals more in mind than others. 
Minutes of these weekly developer meetings get archived and posted 
to the development list. 

.. image:: plots/subscribers.png 

.. overview of PyPy mailing list subscriptions 


How and why EU Framework 6 programme IST funding for OSS work
=====================================================================

Mid 2003 the idea of trying to get EU-funding for the project was born. 
It became clear that the project had a very large scale and that
receiving some funding would dramatically increase the pace and seriousness
of the project.  The community stretched outside of the Open Source ecologies
to try to gather as much information and contacts as possible in order to answer the
question: "Should we go for it?"  to which the answer quickly became 
"Let's see how far we get!". 

"Why do you want money - aren´t you guys non-profit?"
------------------------------------------------------

There had been a growing interest from the European Commission, IST division,
to look closer at the Open Source world and its achievements. Several funded
research projects in the 5th framework programme studied the phenomenon
(FLOSS-POLS, FLOSS) - its organization, business models and licensings. A few
other funded software projects used Open Source in their work as tools
(languages and applications).  There was no previous experience of an Open
Source community based project making a bid for funding. 

The areas in the 6th Framework programme (second call) luckily fitted very well 
with the objectives of PyPy.  The idea of strengthening the european software
development companies and businesses with supporting an open source language
implementation was new but appealing to the EU.  But being an Open Source
project wasn´t enough - the challenges and the idea of an flexible,
configurable "translator" or "compiler" met the research targets of the FP6, as
well as trying out and documenting the agile methodology being used.  

In short, we argued that EU funding allows the project to go for
reaching a critical mass and position to continue to evolve from 
there. 

Acting on this proved to be a more difficult task. The
entire proposal and negotiation process took over a year (Autumn 2003 till 
November 2004). Satisfying the formal requirements, the description of work,
had not previously been a part of the development process and both the EU 
and the parties involved had to adapt to the situation.  Yet, drafting the
high-level requirements (in total 14 workpackages and 58 deliverables) was made
using the same version-control/review based work style and also papers 
were written during sprints.  Writing the proposal and specifying according 
objectives on a higher level has been useful for clarifying goals on a 
longer term - also helping - helping others better understand the visions. 

Unfortunately the negotiations got stuck in organizational limbo and the
project is still suffering from the effects of this even today. The vision of
funding contribution during and between sprints to people inside and outside of
the formal funding project structure was originally based on a neutral 
non-profit association.  This solution wasn't seen as realistic or feasible by
the EU.  In the course, we reached an alternative solution that has a few
drawbacks:  Contributors have to become Partners within the Consortium 
(which is by itself not hard) and can then at least claim travel and 
accomodation costs when attending sprints.  However, this does not 
easily allow them to get paid for working and also has some formal 
requirements.  This leads to current considerations of developers 
to shift private money between them in order to circumvent the 
current problems with implementing an agile model with the EU. 


consortium and companies within a OSS community structure
----------------------------------------------------------------------

Two of the core developers founded companies allowing them to
participate in EU funding - what first might have felt as an
EU-related obstacle became an opportunity, but with an added
load of legal and organizational responsibilities, in itself
adding inertia to an agile process.

Other adjustments, recruiting companies with previous EU project experiences
and not part of the original PyPy community, were done. There was also an
recruitment of a company totally unrelated to the developer work being done in
the PyPy community - focused on process management and designing learning
processes with a background from the Chaospilot school in Aarhus, Denmark. When
creating the formal consortium of seven partners, new cultures and perspectives
were mixed with the strong collaborative Open Source core team, adding new
complexities in communication and cooperation. Getting the new "playmates" to
adopt the vision, culture and spirit of the original idea and holding true to
it during the work on the proposal and negotiation process was a challenge
indeed.

The formal project organization required by the EU imposed new restrictions on
the previous agile process. Roles and responsibilities where staked out,
conforming with the requirements of the roles but delegating as much as
possible of the responsibilities and decision-making to the core developers.
The strategy was to keep "conceptual integrity" (Brooks) of the vision and the
idea in the hands of the core developers. The result was just that but also an
added workload when the project got started, which had a negative effect -
adding inertia and hindering the agility of the process.


The challenge: balancing agile OSS community structures with EU requirements
------------------------------------------------------------------------------ 

The designed agile development process in the funded work of the PyPy project
centers arund the sprints (see picture - sprint process). A budget had been
calculated to fund contribution from the community (the non consortium members)
and the strategy of the project was to sprint every 6th week, moving around and
making it possible for developers to get in touch with the project. Sprinting
in connection with major conferences was also a key strategy.

The nature of sprints changed. The need to meet milestones of the EU-funded
deliverables and the need to keep an open sprint process, still welcoming
newcomers into the world of Pypy, made the sprints longer (7 days with a break
day in the middle) but also changed the nature of the sprints. The team started
to distuingish between sprints open for all to attend, without prior PyPy
experience, and sprints requiring PyPy experience. Tutorials, start up planning
meetings as well as daily status meetings evolved, the latest additions to the
sprints are closing planning meetings (planning the work between sprints) and
work-groups - a version of pair-programming in groups.

Some other effects of sprinting within the EU-structure is that the sprint
becomes a forum for non-development work - coordinating and tracking the
project. The challenge here is not affecting the main work and "disturbing"
visiting developers with EU-related work. It could also be argued that the
prolonged sprints could possibly make it more difficult for non consortium
members to attend the full time, disturbing other engagements etc. 

The project continues to try to enhance the method of sprinting, evaluating
feedback from sprint participants. Maybe the implementation within the PyPy
team is slowly conforming to the Scrum standard of sprinting, but not as a
conscious effort?

Physical persons:

Communication channels:

Managing diversities: agile business - a succesful marriage ?
--------------------------------------------------------------

Agile EU-project:

Agile businesses:


