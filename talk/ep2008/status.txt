===========
PyPy status
===========

:Author: Maciej Fijalkowski
:Location: Europython 2008
:Date: 7 July 2008

What this talk is about
=======================

* more details about recent developments

* our plans for the near future

* how we're going to achieve them

* readers of our blog might know many of those things

Production ready
=====================

* We worked a lot on running
  existing applications on top of PyPy

* Sometimes requiring to change applications slightly

* Especially refcounting details tend to be a problem
  open('xxx', 'w').write('stuff')

CTypes
======

* Official way to have bindings to 
  external (C) libraries for PyPy

* Slow, but getting better

* Sponsored by Google

* Can handle i.e. pysqlite-ctypes, pyglet, pymunk or Sole Scion

XXX demo of sole scion and pyglet

* ctypes is getting better as a side effect:

  * bugs found
  * helper libraries
  * possibility of porting to Jython/IronPython

CTypes configure
================

* Our own small addition to general
  CTypes usefulness

* Invokes C compiler for small details

* Can handle #defines, types, structure layout
  etc.

XXX demo

Sqlite
======

* Part of cpython stdlib since 2.5

* We use Gerhard Haering's CTypes version

* Works reasonably well after some fixes

Django
======

* We run (almost) unmodified Django

* Only sqlite DB backend for now

* Cooperation with Django people to make sure that Django 1.0 works with PyPy

XXX demo

Pylons
======

* Worked almost out of the box once eggs
  are working (1 day)

* No SQLAlchemy yet, obscure problems
  ahead

XXX demo

Twisted & Nevow
===============

* Twisted have some glitches

* Nevow works

* We don't support PyCrypto nor PyOpenSSL and we
  won't anytime soon (if nobody contributes CTypes versions)

Other software
==============

* BitTorrent

* PyPy translation toolchain

* various smaller things, templating engines,
  most pure-python software

Conclusion
==========

* There is no feature obscure enough for people
  not to rely on it

* Generally it's fairly unlikely we'll ever try
  to support stuff without tests XXX what does this mean? we already support things that are untested in CPython

Examples of obscure features
============================

* non-string keys in __dict__ of types

* list comprehension variable in __all__

* relying on untested and undocumented private stuff
  (zipimport._zip_directory_cache)

* exact message matching in exception catching
  code

Speed - comparison with CPython
===============================

* We're something between 0.8-2x slower than
  CPython on various benchmarks.

* gcbench - 0.8 (because of our faster GC)

* We're progressing slowly

Speed - decent GCs
==================

* Faster than refcounting

* Better handling of obscure cases

* Troubles with for example communication with C

Speed - JIT generator
=====================

* Not ready yet!

* Will be super fast

* Prolog prototype

Other backends
==============

* PyPy-jvm runs!

* More integration between pypy-cli and .NET

* General speed improvements

* Both backends are progressing - very slowly though

* contributors wanted!

Sandboxing
==========

* Fully sandboxed python interpreter

* All external calls to C goes via another
  python process

* Special library for making custom
  policies

XXX demo

Cleanup sprint
==============

* Got rid of semi-cool semi-working features

* Reduced code size

* Allowed us to progress forward into
  advanced features

Plans
=====

* More JIT - faster Python

* Support full CPython's stdlib

* make PyPy impossible to segfault - close to that already

No-plans
========

* RPython extensions for CPython

* Maintain arbitrary number of third-party
  extension modules
