====================
PyPy's JIT and Numpy
====================

A common problem when developing scientific applications is that CPython is
too slow. This can mitigated by usage of FORTRAN, C, or Cython in
performance-critical parts of the code, but it would be much nicer if
python ran faster.

Creating a JIT has been one of the main objectives of the PyPy project for
quite a while now.  As of `March 2009`_, we're able to speed up simple
examples in Python t about 20-30x over the speed of CPython. Since PyPy's
JIT is much more flexible than others, Psyco for example, we expect even
greater speedups in the future, as well as support for floats and 64bit
architectures, which Psyco will not achieve in forseeable future.

In this talk, we will talk about the design principles and future of PyPy's
JIT. We won't go into too many architectural details.

We will also present how JIT can make the life easier for simple
postprocessing of data generated by EULAG model. XXX extend.

.. _`March 2009`: http://morepypy.blogspot.com/2009/03/good-news-everyone.html
