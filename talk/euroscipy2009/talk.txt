
=============================================
PyPy's JIT for scientific python computations
=============================================

Contents
========

* Introduction to PyPy

* Introduction to JIT

* A bit about EULAG model

* JIT & numpy integration

* Future

PyPy - what's that?
===================

* A Python interpreter written in Python

* A flexible compiler compiling restricted version
  of Python to lower level platform

* An open source project (MIT license)

Motivation behind the project
=============================

* CPython is not flexible enough

* Python is so much better to write in than C

* Let compiler do the hard work

* Psyco/stackless hard to maintain/extend

* "Psyco consumes one brain per inch of progress"

Motivation - user perspective
==============================

* Noone should be ever forced to write in C for performance

Status of PyPy today
====================

* Very compliant python interpreter (passes CPython test suite)

* Can run complex python applications (Django, twisted, ctypes)

* Pretty good garbage collector

* JIT - in progress (more later)

Python's performance
====================

* Python as a language (not CPython)

* Highly dynamic

* Impossible to efficiently optimize statically

* Dynamic compilation to the rescue

JIT - motivation
================

* Psyco hard to maintain and extend

* Python, contrary to popular belief, is a very complex language

* We want to generate JIT out of interpreter's description

* ... instead of writing it by hand

JIT details
===========

* Interpreter + JIT generated from the interpreter

xxx

JIT - status
============

xxx

xxx

EULAG
=====

Cloud processes cover tremendous range of scales, from thousands of
kilometers to a fraction of a cm...

+----------------------+------------------------+---------------------+
| .. image:: earth.png | .. image:: clouds.png  | .. image:: flow.png |
|     :width: 100px    |      :width: 100px     |      :width: 100px  |
+----------------------+------------------------+---------------------+

Data postprocessing
===================

* Short programs (~200 python LOC)

* Relatively simple logic

* Numpy for operations, matplotlib for output

* Massive datasets

* Sometimes require walking array elements

* Sometimes slow .....

Data postprocessing - solution
==============================

* Implement minimal version of numeric for PyPy

* Reuse the JIT for speedups

* ~10x speedups over CPython version

* Still about 4x slower than C or matrix operations

JIT & Numpy
===========

xxx

Future directions
=================

xxx

Thank you! Questions?
=====================

