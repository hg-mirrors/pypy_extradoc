.. include:: beamerdefs.txt

=======================================
PyPy 1.2: snakes never crawled so fast
=======================================


Outline
-------

- PyPy 1.2: what's new and status update

- Overview of the JIT

- Demo: how to use PyPy right now


Part 0: What is PyPy? :-)
--------------------------

- Python interpreter written in Python

- Framework for developing dynamic languages

- etc. etc.

|pause|

- From the user point of view

- An alternative to CPython

- with more features!



Part 1
-------

- What's new and status update


What's new in PyPy 1.2
-----------------------

- Released on March 12th, 2010

- Main theme: speed

- JIT compiler

- speed.pypy.org

- Ubuntu packages


Speed: PyPy vs CPython
-----------------------

.. image:: pypy-vs-cpython.png
   :scale: 35


Speed: PyPy vs Psyco
-----------------------

.. image:: pypy-vs-psyco.png
   :scale: 35

Speed: Demo
-----------

- Django application

- Mandelbrot fractal

  * fished randomly on the net :-)

- Run both on CPython and PyPy

  * django trunk!



What works on PyPy
-------------------

- Pure Python modules should Just Work (TM)

  * django trunk

  * twisted, nevow

  * pylons

  * bittorrent

  * ...

|pause|

- lot of standard modules

|scriptsize|

  * __builtin__ __pypy__ _codecs _lsprof _minimal_curses _random _rawffi
    _socket _sre _weakref bz2 cStringIO crypt errno exceptions fcntl gc
    itertools marshal math md5 mmap operator parser posix pyexpat select sha
    signal struct symbol sys termios thread time token unicodedata zipimport
    zlib

  * array binascii cPickle cmath collections ctypes datetime functools grp md5
    pwd pyexpat sha sqlite3 syslog

|end_scriptsize|

  * **ctypes**


What does not work on PyPy
--------------------------

- Pure Python modules should Just Work (TM) |pause|

  * ... unless they don't :-)

|pause|

- Programs that rely on CPython-specific behavior

  * refcounting: ``open('xxx', 'w').write('stuff')``

  * non-string keys in dict of types (try it!)

  * exact naming of a list comprehension variable

  * exact message matching in exception catching code

  * ...

|pause|

- Extension modules |pause|

  * really?

  * drum roll...


cpyext
------

- CPython extension modules in PyPy

- ``pypy-c setup.py build``

- still beta

- not 100% of CPython API is supported

- not included in PyPy 1.2

- Known to work:

  * wxPython (after a patch)

  * _sre

  * PyCrypto

  * PIL


wxPython on PyPy (1)
---------------------

.. image:: wxpython1.png
   :scale: 30

wxPython on PyPy (2)
---------------------


.. image:: wxpython2.png
   :scale: 30


PyPy 1.2.1
----------

- Coming soon

- Many bugfixes

  * 26 issues reported after release of 1.2

- beta version of cpyext


Part 2
-------

- the performance of Python:
  how fast can Python code really be?
  (and using how much memory?)
 
Overview of implementations
---------------------------

(Discussing their performance)

- CPython
- Psyco
- Jython, IronPython
- (Stackless)
- PyPy (without and with JIT)
- Unladen Swallow

What a JIT is
-------------

XXX

What a tracing JIT is
---------------------

XXX e.g. the structure of TraceMonkey

The architecture of PyPy
------------------------

XXX diagram showing where the JIT is

XXX diagram detailling the JIT

- it can be used for any interpreter, not just Python

Speed of the PyPy JIT
---------------------

Python programs that are, or are not, nicely handled
by the JIT:

- loops, even across many calls, are nicely handled
- interpreter-like constructs are not
- bad support so far for generators and recursion

The optimizations we get
------------------------

(Quick overview only, with examples of programs that benefit)

- "virtuals", i.e. temporary objects are not constructed
- removed frame handling

Practical results
-----------------------

- so far, x86-32 only
- mention again the performance shown by the graphs
- a quick tour of other missing improvements
- reminder: works for *any* Python code (even more
  than Psyco)


Part 3
------

How to use PyPy right now


Mandelbrot demo
---------------

- Works purely on PyPy

- Not always the case

  * missing extension modules (cpyext mitigates the problem)

  * libraries that rely on CPython details
    
  * ...

- clear performance-critical part


CPython and PyPy side by side
------------------------------

- CPython: runs the main application

- PyPy: subprocess, runs only the hotspots

- How do they communicate?

- execnet

  * **The Ring of Python**, Holger Krekel, 9:00

  * oups, too late :-)


Rendering (1)
---------------

|example<| Mandelbrot |>|
|small|
::

    def render(request):
        w = int(request.GET.get('w', 320))
        h = int(request.GET.get('h', 240))

        from py_mandel import mandelbrot
        img = mandelbrot(w, h)

        return HttpResponse(img, content_type="image/bmp")

|end_small|
|end_example|


Rendering (2)
-------------

|example<| Mandelbrot on PyPy |>|
|small|
::

    def pypy_render(request):
        w = int(request.GET.get('w', 320))
        h = int(request.GET.get('h', 240))

        channel = pypy.remote_exec("""
            from py_mandel import mandelbrot
            w, h = channel.receive()
            img = mandelbrot(w, h)
            channel.send(img)
        """)
        channel.send((w, h))
        img = channel.receive()

        return HttpResponse(img, content_type="image/bmp")

|end_small|
|end_example|

execnet setup
-------------

|example<| At startup |>|
|small|
::

    import execnet
    mygroup = execnet.Group()
    pypy = mygroup.makegateway("popen//python=pypy-c")
    pypy.remote_exec("""
        import sys
        import os
        os.chdir("mandelbrot")
        sys.path.insert(0, '')
    """)

|end_small|
|end_example|


Demo
----


Benchmarks
----------

.. image:: demo-graph.pdf
   :scale: 45


Contact / Q&A 
--------------

* Antonio Cuni: at http://merlinux.eu

* Armin Rigo: arigo (at) tunes.org

* Links:

  -  PyPy: http://www.pypy.org

  - PyPy speed center: http://speed.pypy.org/

  - Blog: http://morepypy.blogspot.com
