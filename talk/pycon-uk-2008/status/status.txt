================================
PyPy Python Interpreter status 
================================

What this talk is about
=======================

* tell what Python Interpreter can run today 

* what we are heading for with the 1.1 release 

* Questions and Answers 

Getting Production ready
==========================

* we worked a lot on running
  existing applications on top of PyPy

* sometimes requiring to change applications slightly

* especially refcounting details tend to be a problem

::

  open('xxx', 'w').write('stuff')

CTypes
======

* official way to have bindings to 
  external (C) libraries for PyPy

* slow, but getting better

* can handle i.e. pysqlite-ctypes, pyglet, pymunk or Sole Scion

* ctypes is getting better as a side effect:

 * errno handling

 * bugfixes

 * helper libraries

* part of google sponsoring

* 32bit only by now

CTypes configure
================

* our own small addition to general
  CTypes usefulness

* invokes C compiler for small details

* can handle #defines, types, structure layout
  etc.

Sqlite
======

* part of cpython stdlib since 2.5

* we use Gerhard Haering's CTypes version

* works reasonably well after some fixes

Django
======

* we run unmodified Django 1.0

* only sqlite DB backend for now

http://www.djangoproject.com

http://code.djangoproject.com/wiki/DjangoAndPyPy

Pylons
======

* worked almost out of the box once eggs
  were working (1 day)

* no SQLAlchemy yet, obscure problems
  ahead

* unmodified passes all tests

* http://pylonshq.com/

Twisted & Nevow
===============

* twisted works (60/4500 tests failing)

* nevow works

* we don't support PyCrypto nor PyOpenSSL and we
  won't anytime soon (if nobody contributes CTypes or rpython
  versions)

* http://twistedmatrix.com/

Other software
==============

* BitTorrent

* PyPy translation toolchain

* py lib 

* sympy

* various smaller things, templating engines,
  most pure-python software

Obscure details that people rely on
===================================

* non-string keys in __dict__ of types

* exact naming of a list comprehension variable

* relying on untested and undocumented private stuff
  (zipimport._zip_directory_cache)

* exact message matching in exception catching
  code

* refcounting details

Transition to 2.5
==========================

* SOC project Bruno Gola 

* almost complete

* missing more testing, stdlib porting 

Conclusion on Compatibility
============================

* lessons learned: There is no feature obscure enough for people
  not to rely on it. 

* pypy-c interpreter probably the most compatible to CPython

* main blocker for running apps will be missing external modules

Speed - comparison with CPython
===============================

* we're something between 0.8-4x slower than
  CPython on various benchmarks.

* steady but slow progress

* we hope for our JIT to be a huge leap ahead

* pypy-c has fastest Interpreter startup

Memory - comparison with CPython
===================================

* PyPy has pluggable Garbage Collection 

* gcbench - 0.8 (because of our faster GCs)

* better handling of unusual patterns

* care needed with communication with C

* GCs are semi-decent

Speed - JIT generator
=====================

* not ready yet!

* will be super fast

* some prototypes, research ongoing

* psyco is a nice proof that this approach
  would work

Other backends
==============

* PyPy-jvm runs!

* more integration between pypy-cli and .NET

* general speed improvements

* both backends are progressing - very slowly though

* contributors wanted!

Sandboxing
==========

* fully sandboxed python interpreter

* all external calls to C goes via another
  python process

* special library for making custom
  policies

.. image:: sandboxed.png
   :scale: 30
   :align: center

pypy-c on small devices
===============================

- cross-compilation 
- startup time 
- security 
- RAM usage 
- share interpreter state across processes
- pypy approach a very good fit! 

1.1 release goals 
===================================

- compatible to Python 2.5.2 
- well tested on win/linux 32 bit 
- os/x and 64 also targets
- running some major packages unmodified 
- easy_install/distutils working 
- deliver pypy-c binary installs windows 

Contact / Q&A 
==========================

holger krekel, Maciej Fijalkowski
at http://merlinux.eu

PyPy: http://codespeak.net/pypy

Blog: http://morepypy.blogspot.com

.. raw:: latex

    \begin{figure}
    \includegraphics[width=64px,height=64px]{merlinux-logo.jpg}
    \qquad
    \includegraphics[width=80px]{../../img/py-web.png}
    \end{figure}
