XXX Understanding PyPy, and How It Let's You Do Things You Have Only Dreamed About. (*)
XXX The PyPy way and the tales of nice features and permissive(?) design
================================================================================
(* for particularly nerdy dreams :-) )

Summary (max 100 words, for the website):

In this talk we would like to outline pypy's unique features, namely
sandboxing, transparent proxy, our distribution prototype and our security
prototype, the taint objspace. We would also like to summarize our design
decision which make it possible for such features to be non-pervasive to the
core interpreter codebase. Those features also works out of the box on
different pypy target platforms (C/POSIX, .NET, JVM) from the single source
interpreter.

Description and outline:

In this talk, we would like to present our paradigm-shifting architecture
for dynamic languages and some features which are exclusively available in
PyPy, due to our novel approach.

Talk outline:

* Quick recap of our motivation for creating pypy.

* The transparent proxy, which allows programmers to create
  indistinguishable proxies for any type in Python (including built-in
  python types like frames), with various usage showcases including
  our completely transparent remote access scheme.

* the PyPy Sandbox, which allows to run a non-stripped version of
  our Python interpreter in a controlled environment with a custom
  safety policy.

* The Taint Object Space, which allows programmers to make sure that sensitive
  information does not cross I/O barriers.

* Why our approach of doing pervasive changes to semantics does not
  require pervasive changes to the interpreter core.
  Why our design allows us to describe a broad class of such changes
  as a "proxying operation" and finally, why design matters when you want
  to get a butterfly out of the caterpillar instead of a bigger caterpillar.
