XXX Understanding PyPy, and How It Let's You Do Things You Have Only Dreamed About. (*)
================================================================================
(* for particularly nerdy dreams :-) )

In this talk, we would like to present our paradigm-shifting architecture
for dynamic langauges and some features which, due to our appraoch
are exclusively available with PyPy.  

Topics would include:

* The transparent proxy, which allows programmers to create
  transparent object of any type in python (including built-in
  python types like frames), with various usage showcases including
  our completely transparent remote access scheme. (XXX: I know what
  you mean, but "create transparent object" is a bit vague)

* the PyPy Sandbox, which allows to run non-stripped version of
  python interpreter in a controlled environment with custom
  safety policy.

* The Taint Object Space, which allows programmers to make sure that sensitive
  information does not cross the I/O barrier.

* XXX anything else?  lazy evaluation?

* Why our approach is "working by design", rather then "fix as long as
  anyone complains", why it's only permitted by our design decisions and
  abstraction levels. How our all of the mentioned above examples could
  be reduce to simple "proxy operation" concept.

  'working by design' means something else.  it means 'we designed it
  to work, which, of course, is true of everything that didn't happen
  by accident (and maybe that too, if some people's ideas of God are
  are correct).

* _why_ design matters.  _when_ design matters.  Some thoughts on when
  incremental improvements are not the answer, and why successive
  improvements in painting things red will not turn your children's
  wagon into a firetruck, despite being the perfect approach to the
  problem of 'making what I have red'.

I am getting all these weird ideas of how a caterpillar becomes a
larger caterpillar is not the same way a caterpillar becomes a
butterfly.  Either this is a useful analogy, or I am nuts.

