XXX Understanding PyPy, and How It Let's You Do Things You Have Only Dreamed About. (*)
XXX The PyPy way and the tales of nice features and permissive(?) design
================================================================================
(* for particularly nerdy dreams :-) )

In this talk, we would like to present our paradigm-shifting architecture
for dynamic languages and some features which are exclusively available in
PyPy, due to our novel approach.

Topics include:

* The transparent proxy, which allows programmers to create
  indistinguishable proxies for any type in Python (including built-in
  python types like frames), with various usage showcases including
  our completely transparent remote access scheme.

* the PyPy Sandbox, which allows to run a non-stripped version of
  our Python interpreter in a controlled environment with a custom
  safety policy.

* The Taint Object Space, which allows programmers to make sure that sensitive
  information does not cross I/O barriers.

* XXX anything else?  lazy evaluation? Is a bit too much, I think

* Why our approach of doing pervasive changes to semantics does not
  require pervasive changes to the interpreter core.
  Why our design allows us to describe a broad class of such changes
  as a "proxying operation" and finally, why design matters when you want
  to get a butterfly out of the caterpillar instead of a bigger caterpillar.
