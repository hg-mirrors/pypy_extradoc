XXX Title (inside pypy seems to be too "inside")
================================================

In this talk, we would like to present few features exclusive to
the PyPy python interpret and novel-implementation approaches
which made it easy to implement those features. The talk would
consist on:

* Transparent proxy concept, which allows programmers to create
  transparent object of any type in python (including built-in
  python types like frames), with various usage showcases including
  our completely transparent remote access scheme. (XXX: I know what
  you mean, but "create transparent object" is a bit vague)

* Sandboxing concept, which allows to run non-stripped version of
  python interpreter in a controlled environment with custom
  safety policy.

* Taint object space, which allows programmers to make sure that sensitive
  informations do not cross the I/O barrier.

* XXX anything else?

* Why our approach is "working by design", rather then "fix as long as
  anyone complains", why it's only permitted by our design decisions and
  abstraction levels. How our all of the mentioned above examples could
  be reduce to simple "proxy operation" concept.
