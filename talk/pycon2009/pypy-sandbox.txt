Title: Python in a sandbox
Presenter: Holger Krekel <holger@merlinux.eu>
Recording: i give permission to record and publish my PyCon talk for free distribution. 
Talk length: 30 minutes, if possible more
Intended Audience: advanced python programmers
Format of talk: interactive lecture, questions welcome at all times
Categories: Core, Other Implementations/PyPy, Embedding and extending Python

Presenter bio: 

Holger Krekel is a co-founder of the PyPy project and
participates on many levels in it.  He is the initiator and
maintainer of the popular py.test and a few other tools.  In
2004 he founded merlinux, a company focusing on PyPy and py.test 
developments.  Holger has talks at many EuroPython and 
PyCon confereces and gave well received testing 
tutorials at EuroPython 2008 and Pycon-UK 2008. 

Talk summary: 

Old questions, news answers. How to run untrusted Python code? 
We'll showcase the PyPy virtualization approach which allows 
to control all file, IO, CPU and RAM resources of a Python
interpreter.  We'll discuss the underlying model and discuss
shortcomings and future possibilities.  

description: 

In the 17 years of Python existence there have been numerous 
approaches to "sandbox" Python, Zope's RestrictedPython 
and Google AppEngine being popular examples.  PyPy takes 
a fresh approach and allows to systematically control 
all access to Files and IO.  This not only allows 
restricting access but provides a fully virtualized 
system environment to a Python process - for example a Python
program cannot easily detect that its file objects are in fact
provided by another Python process. 

XXX [fijal] important detail - we don't restrict python as a language at all
XXX it also allows arbitrary access to *any* calls to C, not just files and IO

Apart from Files and IO one can also RAM and CPU usage 
which makes the PyPy approach probably the farthest 
reaching one so far - providing a secure environment
for running untrusted code without without placing
restrictions on language usage.  The talk will showcase
and discuss these features as well as open questions. 
If time is not sufficient we'll schedule Open Space time. 

Note that in this talk we will not talk much about 
architecture and other aspects of the PyPy project. 
Basic familiarity with the project and/or reading up
a bit on the pypy website is recommended. 

XXX [fijal] why? I think that reader should not know about pypy
XXX architecture in order to hear this talk

simple slide outline:

- Sandboxing movitation 
- PyPy's sandboxing large picture 
- virtualizing IO access 
- Demo 
- controler and sandboxed process 
- managing RAM and CPU restrictions
- shortcomings
- future directions
