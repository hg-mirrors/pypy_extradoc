The speed of PyPy's Python
==============================

Summary:

The first part of the talk will cover PyPy's speed achievements resulting 
from the last year's work on the Just-In-Time Compiler.  I'll present 
and discuss a number of benchmarks and compare against other Python-speed 
projects. I'll also cover the basics of how the JIT works and what 
sort of programs it can greatly speedup (and which ones it can't).

Description:

PyPy's JIT has been in development for some years now.  More recently
it became more practical and begins to be `faster than Psyco`_ on some
examples.  This is the status in September 2009 and currently it's fast-paced
development so we expect to have even more interesting results for
February 2010, worth discussing and comparing.  If possible
a 45 minute talk would be cool due to the "explaining the JIT"
bit of the talk. 

Proposed talk agenda:

* Show various benchmarking data and compare different
  python interpreters (CPython, PyPy, Jython, IronPython, unladden swallow)

* A bit of introduction into how PyPy's JIT work (it's tracing JIT,
  like tracemonkey JS interpreter, unlike Psyco or JVM).

* What sorts of programs JITs in general can speed up. What sorts of
  programs PyPy's JIT is better at. What similiar python constructs
  can yield different performance characteristics while JITting.

* Future plans for PyPy, especially JIT-wise.

The main wieght would be put on the point 3 (how can I write my program
so JIT will make it fast).

.. _`faster than Psyco`: http://morepypy.blogspot.com/2009/09/first-results-of-jit.html
