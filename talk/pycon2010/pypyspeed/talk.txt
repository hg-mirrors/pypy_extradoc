=============
Speed of PyPy
=============

JIT - what's that about?
========================

* removing bytecode-dispatch overhead

* removing frame overhead

* other optimizations which can be derived
  from the two above

The main idea
=============

* python has advanced features (frame introspection,
  arbitrary code execution, overloading globals)

* with JIT, you don't pay for them if you don't use
  them

* however, you pay if you use them

So, the general advice
======================

* don't use advanced feature if you don't use them

* don't try to outsmart your compiler

Tracing JIT - short intro
=========================

* the main idea being speeding up loops

* only linear trace of code that was
  actually executed

* mostly can trace loops and to certain
  extent recursion

XXX example of tracing, maybe

Removing frame overhead
=======================

* frames are costly

* *x = y + z* has 5 frame accesses

* it all can be removed!

Removing object boxing
======================

* intermediate values does not need to be allocated

* integer can stay in the register

XXX maybe demo assembler, maaaaybe

Local access costs nothing
==========================

* local variables are not stored on the frame,
  unless *sys._getframe()* is called

* ... or *sys.exc_info()* or exception escapes

XXX picture exception escaping

Shared dicts (aka hidden classes)
=================================

xxx

... only for newstyle classes
=============================

xxx

Generators are tricky (for now)
===============================

xxxx

Generator expressions are even trickier
=======================================

xxx

Don't try to outsmart your compiler
===================================

xxx

Solution: move back code to python
==================================

xxx

Never use id(obj), unless you really have to
============================================

xxx

Allocation patterns
===================

xxx

Bad case for a moving GC
========================

xxx

Problems
========

* long traces

* megamorphic calls

Future
======

* release

* xxx

Q&A
===

* xxx
