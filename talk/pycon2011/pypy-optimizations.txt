Title: Optimizations in PyPy
Description:

PyPy is a virtual machine for Python, featuring an advanced just in time
compiler, which can deliver exceptional performance.  This talk is going to be
a deep dive into what exactly makes Python such a hard language to optimize,
how PyPy is organized, and what optimizations our JIT can do for your code.

Session type: Talk
Classification: Discuss in depth
Abstract:

The talk would contain a list of features that are hard to optimize in Python,
why and how we're fixing it in PyPy. This also might be used as a rough guide
what features in Python are optimizable right now and what are not.

The list of mentioned features is not exhaustive, however we will try to
focus at least on the following:

* Dynamic language - In Python code we have no known types, like a static
  language.  Even operations like "a + b" can do anything, unless we know more
  about the code.

* Frame introspection - Frame objects need to be allocated for every function
  call, and all local variables are stored on the frame, and must be accessible
  from further down the call stack.

* Object model - All user defined Python objects have a dictionary which stores
  their attributes, as does every type.  When Python does an attribute lookup
  this requires 2 dictionary lookups.

  In PyPy we use an approach similar to one used by v8 with hidden classes
  (except more pypy specific) called shared dictionaries.

* FFI calls - calling C from Python is costly and hard to optimize. In PyPy we
  decided to go via ctypes, this part will explain how are we going to handle
  ctypes calls to be fast.

* `array` module - users of the CPython array module probably know it can save
  them quiet a bit of memory, however it's also slower than using a list, due
  to the overhead of boxing and unboxing on every operations. Here we will tie
  everything together and describe how the ``array`` module is much faster with
  PyPy's JIT, combining our optimizations to: unbox values, remove the
  dynamicism within traces, and deliver great performance.
