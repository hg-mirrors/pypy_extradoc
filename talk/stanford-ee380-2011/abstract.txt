---------------------------------
Python in Python: the PyPy system
---------------------------------

PyPy is a complete Python implementation in Python, in the
old tradition of Squeak and Scheme48 --- or so it seems.

During this talk I will describe what PyPy more precisely is,
contrasting it with the other Python implementations, and showing
results: faster execution of most programs (by a factor between
1.5x and 20x) and a lower memory usage, while being fully
compatible.

I will then focus on the architecture of PyPy: on the one hand,
Python itself is written as a straightforward interpreter,
written in a (large) subset of Python called RPython.  On the
other hand, we have a complex translation toolchain able to
compile interpreters from RPython to efficient code (either C, or
experimentally JVM/.NET).  This toolchain "weaves" into the final
executable various aspects not present in the source of the
interpreter: the object model, garbage collection, and even the
Just-in-Time Compiler.  I will explain how this is done,
particularly the JIT Compiler, which is a "meta" tracing JIT.

I will conclude by comparing PyPy with other projects, old and
new: Squeak, CPython, Jython and IronPython, as well as the
various recent tracing JITs like TraceMonkey.
