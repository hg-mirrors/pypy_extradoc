Talk at Dropbox.  Friday March 4th at 2 p.m.
Speaker: Armin Rigo

Bio:
Armin Rigo is a researcher at Heinrich-Heine-Universität in Düsseldorf,
Germany.  His academic interests include Programming Languages and
Implementation Techniques.

He is the lead designer of the PyPy project and one of its
original founders.  He is also the author of Psyco, a hand-coded
Just-in-Time specializing compiler for Python, which can be used
transparently with 32-bit x86 versions of CPython.  Since 2003 he has
worked on all aspects of PyPy: its Python interpreter (written in
Python), its translation toolchain (which produces C code), its
garbage collectors, and its Tracing Just-in-Time compiler generator.
Since the end of 2010, the Just in Time compiler generated by PyPy
has outperformed Psyco, while being much more general and robust.

Abstract:
The PyPy project has recently gathered a lot of attention for its
progress in speeding up the Python language -- it is the fastest,
most compatible and most stable 'alternative´ Python interpreter.  No
longer merely a research curiosity, PyPy is now suitable for production
use.  Since 2009, the PyPy project has received funding from the Eurostars 
Eureka program, which targets small European firms which produce research.
(See: http://www.eurostars-eureka.eu/)

This talk will begin with an introduction to PyPy and then a more detailed
discussion of what we have accomplished with the past two years' work in 
the area of dynamic (Just-in-Time) interpreters.  We have had some very
useful comments from Rian Hunter about areas of interest to dropbox, and
we will finally discuss those bits which weren't already discussed.:

* PyPy - the architecture XXX expand this

* most Python benchmarks run much faster than with CPython or Psyco
  "10x speedup in the average case for a tight loop in python"
  speed.pypy.org
* the real-world PyPy compiler toolchain itself (200 KLocs) runs twice as fast
* already supports 64bit and is in the process of supporting ARM
* full compatibility with  CPython (more than Jython/IronPython)
* full (and JIT-ed) ctypes support to call C libraries from Python
* supports Stackless Python (in-progress)
* new "cpyext" layer which integrates existing CPython C extensions
* an experimental super-fast JIT-compilation of calls to C++ libraries
*A memory conservative JIT in steady state i.e. python right now  
requires about 10MB of steady-state memory (all bytecodes / loaded  
modules) not counting app usage. how much will that overhead increase  
when using pypy? 
     Maemo experiments.
     Things we have done to shrink the memory usage.
     But its huge now, anyway, because of the JIT.
     What could be done to change this.
     And do you really care about absolute size?  Or just that it can
     scale and doesn't grow without bounds?

* MIT license "so we can modify the runtime to generate obfuscated  
pyc files" -- if your business really depends on obsfuscated code, and
reverse engineering is a real worry for you, then we can do much better
with pypy than what you are doing now.  (Anto cracked it already)

*Compatibility with the major python executable packagers, py2exe,  
py2app, and bfreeze (in that order)
We're not going to embed a Cpython stub into an exe as py2exe does.
We can produce executables with the python files embedded.  A PyPy packager.
what it would look like.  What would be its advantages?
(Actually we can produce a single exe that contains all
necessary .py files already loaded; then there are no .py/.pyc files
to distribute and obfuscate any more, and it's all in just one .exe.
Such an .exe is maybe relatively large but compresses a lot.)

*Future directions (what to do when Eurostars funding runs out)
re: "The engineering resources to migrate won't require >1 month of work"
-- one option is to hire us to do the migration.


*Any other aspect of interest to audience members.  We already got a nice 
start on understanding your interests through a list of questons from
Rian Hunter.  But if anybody else has ideas about what they would like
us to speak about, (or if Rian gets some more ideas) could  they please
send a note to lac@openend.se and we will make sure that we cover this
in our presentation.

The PyPy project has a blog which may be of interest.  You can read
it at http://morepypy.blogspot.com/ .

