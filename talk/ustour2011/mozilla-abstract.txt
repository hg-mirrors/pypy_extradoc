
Authors: Armin Rigo, Maciej Fijalkowski
# XXX get bios from laura

The PyPy project has gathered recently a lot of attention for its
progress on speeding up the Python language -- it is the fastest,
most compatible and stable alternative Python interpreter:

* most Python benchmarks run much faster than with CPython or Psyco
* the real-world PyPy compiler toolchain itself (200 KLocs) runs twice as fast
* full compatibility to CPython (more than Jython/IronPython)

In this talk we will focus on how we reached this goal in a truly
ouroboros manner by implementing many pieces in RPython, a subset
of Python that our toolchain analyzes and compiles to C:

* our Python interpreter
* pluggable GCs
* the JIT itself, including x86/ARM backends

The translation toolchain itself is written in full Python (not RPython!)
and generates JIT support automatically from the interpreter source code,
thereby reducing complexity for writing state-of-the-art interpreters.

There are many interesting details that can be explored further;
we will focus on the points the audiance is most interested in.

