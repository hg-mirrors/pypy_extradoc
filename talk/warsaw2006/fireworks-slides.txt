PyPy fireworks
==============

:Authors: Maciej Fijalkowski
:Location: Warsaw Univeristy
:Date: 1.XII.2006

.. raw:: html

   <script src="jssource.js" type="text/javascript"></script>
   <script src="MochiKit.js" type="text/javascript"></script>

What is PyPy?
=============

* An implementation of Python written in Python

* A very flexible compiler toolchain

* An open source project (MIT License)

* A STREP ("Specific Targeted REsearch Project"), partially funded by the EU

* A lot of fun!

Compiler toolchain:
===================

* eats RPython

* C considered harmfull

* is kind-of-stable right now

Flow graphs & annotation:
=========================

* We create flow graph out of RPython code `flow`_::

   def g(x):
      return 1

   def f(x):
      return g(x) + 3

* We `annotate`_ variables encountered

* It must be "static-enough" to perform such operation

* We `RType`_ (creating low-level types)

* Source generation

.. _`flow`: javascript:flow()
.. _`annotate`: javascript:annotate()
.. _`RType`: javascript:rtype()

RPython:
========

* *is* Python (can be unittested in Python)

* Can perform full type inference (top to bottom)

* Is run over living python objects (full range of meta-programming)

* Is build "as we need it", so no real definition

* rctypes (like ctypes, but will change to C calls)

Backends & more flow graphs:
============================

* LLtype-based: C, LLVM, 

* OOtype-based: CLI, JVM, JavaScript, (CL and Squek in some state).

* All optimisations are done on flow graphs

* XXX: constant-folding demo

* Wide range of possible things to do with it

JavaScript backend:
===================

* Co-funded by Google Summer of Code *and* Summer of PyPy.

* Mochikit: Makes JavaScript suck less...

JavaScript backend:
===================

* pypy.js: makes JavaScript suck less by not using it::

   def f(x):
      return dom.get_document().getElementById(x)

* Unittest in python run in browser::

   def test_f():
      assert isinstance(f("id"), dom.Element)

* Python semantics (not only syntax)::

   try:
       {'a':3}['b']
   except KeyError:
       # will arrive here

JavaScript example one (console):
=================================

JavaScript example two (Bub'n'Bros):
====================================


Transparent proxy:
==================

* Idea (proxied to app-level), altough there is interp-level version

* Possible usecase - shallow copy of remote objects (altough not working
  because of lack of os.execv)

Deterministic concurrency:
==========================

* So called "stackless" features

* Basically provides way of copying stack to heap and backwards

* (demo) (in-browser)

* pickling coroutines

* cloning coroutines

* based on graph-transform (demo)

Composability problem:
======================

* (demo) XXX: really?

* possible solution

Offline partial evaluation:
===========================

* XXX hard to do

Prolog interpreter as an use-case of compiler framework:
========================================================

* XXX see if it's worth showing
