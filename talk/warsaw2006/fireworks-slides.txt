PyPy fireworks
==============

:Authors: Maciej Fijalkowski
:Location: Warsaw Univeristy
:Date: 1.XII.2006

.. raw:: html

   <script src="jssource.js"/>
   <script src="MochiKit.js"/>

What is PyPy?
=============

* An implementation of Python written in Python

* A very flexible compiler toolchain

* An open source project (MIT License)

* A STREP ("Specific Targeted REsearch Project"), partially funded by the EU

* A lot of fun!

Compiler toolchain:
===================

* (picture)

* eats RPython

* C considered harmfull

Flow graphs & annotation:
=========================

* We create flow graph out of RPython code::
   def g(x):
      return 1

   def f(x):
      return g(x) + 3

.. raw:: html

   <a href="javascript:flow()">Show</a>

* We annotate variables encountered

* "static-enough"

* (picture)

* (demo)

RPython:
========

* *is* Python (can be unittested in Python)

* Can perform full type inference (top to bottom)

* Is run over living python objects (full range of meta-programming)

* Is build "as we need it", so no real definition

* rctypes

* (examples)

Multiple backends:
==================

* Actually: C, LLVM, CLI, JVM, JavaScript, (CL and Squek in some state).

* PyPy the way you like it.

JavaScript backend (1/2):
=========================

* Co-funded by Google Summer of Code *and* Summer of PyPy.

* Mochikit: Makes JavaScript suck less...

JavaScript backend (2/2):
=========================

* pypy.js: makes JavaScript suck less by not using it

* Unittest in python run in browser

* AJAX by method calls.

Transparent proxy:
==================

* Idea (proxied to app-level), altough there is interp-level version

* Possible usecase - shallow copy of remote objects (altough not working
  because of lack of os.execv)

Deterministic concurrency:
==========================

* So called "stackless" features

* Basically provides way of copying stack to heap and backwards

* (demo) (in-browser)

* pickling coroutines

* cloning coroutines

* based on graph-transform (demo)

Composability problem:
======================

* (demo) XXX: really?

* possible solution

Offline partial evaluation:
===========================

* XXX hard to do

Prolog interpreter as an use-case of compiler framework:
========================================================

* XXX see if it's worth showing
